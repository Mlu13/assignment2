gdPlot(list(ideogram, minusStrand, genomeAxis, minStrand))
# save as Rplot4.png
sessionInfo()
getwd()
# setwd("/Users/pevsner/Documents/#3e/3e_SolutionsToProblems")
setwd("/Users/maggie/Documents/HS630/hw/biomart")
#source("http://bioconductor.org/biocLite.R")
#biocLite("GenomeGraphs")
options(width=50)
library(GenomeGraphs)
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl") #make connection to database
gene <- makeGene(id = "ENSG00000128731", type="ensembl_gene_id", biomart = mart)
gdPlot(gene) # save the output as Rplot1 (a .png file)
getwd()
# setwd("/Users/pevsner/Documents/#3e/3e_SolutionsToProblems")
setwd("/Users/maggie/Documents/HS630/hw/biomart")
#source("http://bioconductor.org/biocLite.R")
#biocLite("GenomeGraphs")
options(width=50)
library(GenomeGraphs)
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
gene <- makeGene(id = "ENSG00000128731", type="ensembl_gene_id", biomart = mart)
gdPlot(gene) # save the output as Rplot1 (a .png file)
transcript <- makeTranscript(id = "ENSG00000128731", type="ensembl_gene_id", biomart = mart)
gdPlot(list(gene, transcript))
minusStrand <- makeGeneRegion(chromosome = 15, start = 28111040, end = 28322172, strand = "-", biomart = mart)
genomeAxis <- makeGenomeAxis(add53 = TRUE) # Add53 shows 5' and 3' ends
gdPlot(list(genomeAxis, minusStrand))
minStrand <- makeGeneRegion( chromosome = 15, start = 28111040, end = 28322172, strand = "-", biomart = mart)
ideogram <- makeIdeogram(chromosome = 11)
genomeAxis <- makeGenomeAxis(add53=TRUE, add35=TRUE)
gdPlot(list(ideogram, minusStrand, genomeAxis, minStrand))
# save as Rplot4.png
sessionInfo()
sessionInfo()
library(shiny)
ui <- fluidPage()
server <- function(input, output){ }
shinyApp(ui = ui, server = server)
args <- commandArgs(trailingOnly = T)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot")
)
)
)
# Define server
server <- function(input, output) {
output$boxplot <- renderPlot({
boxplot(rnorm(input$n), col = "blue")})
}
shinyApp(ui, server)
setwd("/Users/maggie/Documents/Semantic/lab-json-xml-r-Mlu13/src")
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
setwd("/Users/maggie/Documents/Semantic/lab-json-xml-r-Mlu13/src")
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
setwd("/Users/maggie/Documents/Semantic/lab-json-xml-r-Mlu13/src")
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot")
)
)
)
# Define server
server <- function(input, output) {
output$boxplot <- renderPlot({
boxplot(rnorm(input$n), col = "blue")})
}
shinyApp(ui, server)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "bhoose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot")
)
)
)
# Define server
server <- function(input, output) {
output$boxplot <- renderPlot({
boxplot(rnorm(input$n), col = "blue")})
}
shinyApp(ui, server)
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "bhoose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot"),
verbatimTextOutput("ncount_2")
)
)
)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "bhoose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot"),
)
)
)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "choose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot"),
)
)
)
# Define server
server <- function(input, output) {
output$boxplot <- renderPlot({boxplot(rnorm(input$n), col = "blue")})
output$value <- renderPrint({ input$b })
}
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "choose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot"),
textOutput(outputId = "button")
)
)
)
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50)
),
sidebarPanel(
textInput(inputId = "y",labe = "Title of the boxplot" )
),
sidebarPanel(
radioButtons(inputId = "b",labe = "choose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot")
)
)
)
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
library(shiny)
# Define UI
ui <- fluidPage(
# App title
titlePanel('App 1 - Boxplot'),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input:
sliderInput(inputId = "n", label = "Sample size", min = 10, max = 100, value = 50),
textInput(inputId = "y",label = "Title of the boxplot" ),
radioButtons(inputId = "b",label = "choose the color", c("Blue","green",'Red') )
),
# Main panel for displaying outputs
mainPanel(
plotOutput(outputId = "boxplot")
)
)
)
# Define server
server <- function(input, output) {
output$boxplot <- renderPlot({boxplot(rnorm(input$n), col = "blue")})
output$boxplot <- renderPlot({boxplot(rnorm(input$n),col = input$b)})
output$boxplot <- renderPlot({boxplot(rnorm(input$n),col = input$y)})
}
shinyApp(ui, server)
library(shiny)
# Define UI
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
runApp('~/Documents/Bioinfo/shiny/app1_boxplot.R')
parse_csv <- function() {
# Parse a CSV file by separating it into headers and additional data.
#
# Args
# filename: A path to a CSV file.
#
# Returns
# An R structure containing the headers from the csv file and the data.
# setwd(path)
}
# parse_csv <- function() {
#     # Parse a CSV file by separating it into headers and additional data.
#     #
#     # Args
#     # filename: A path to a CSV file.
#     #
#     # Returns
#     # An R structure containing the headers from the csv file and the data.
#
#     # setwd(path)
#
# }
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
setwd("/Users/maggie/Documents/Semantic/lab-json-xml-r-Mlu13/src")
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
setwd("/Users/maggie/Documents/Semantic/lab-json-xml-r-Mlu13/src")
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
parse_csv <- function() {
# Parse a CSV file by separating it into headers and additional data.
#
# Args
# filename: A path to a CSV file.
#
# Returns
# An R structure containing the headers from the csv file and the data.
print(getwd())
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
}
parse_csv()
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
parse_csv <- function() {
# Parse a CSV file by separating it into headers and additional data.
#
# Args
# filename: A path to a CSV file.
#
# Returns
# An R structure containing the headers from the csv file and the data.
print(getwd())
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
print(input)
}
parse_csv()
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
parse_csv <- function() {
# Parse a CSV file by separating it into headers and additional data.
#
# Args
# filename: A path to a CSV file.
#
# Returns
# An R structure containing the headers from the csv file and the data.
path <- getwd()
setwd(path)
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
return(input)
}
parse_csv()
View(parse_csv)
# Define UI
setwd("/Users/maggie/Documents/Bioinfo/Shiny")
df <- data.frame("diabetes2.csv", header = T, stringsAsFactors = F)
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
path <- getwd()
print(path)
# This script converts a CSV file with headers to XML or JSON, depending on
# the command line argument supplied.
#
# This script will be executed by calling:
#
#    ```
#    Rscript src/lab1.R xml/json <filename>
#    ```
#
# Output of XML and JSON should be printed to stdout.
require(jsonlite)
require(XML)
path <- getwd()
print(path)
parse_csv <- function(filename) {
# Parse a CSV file by separating it into headers and additional data.
#
# Args
# filename: A path to a CSV file.
#
# Returns
# An R structure containing the headers from the csv file and the data.
# path <- getwd()
setwd(filename)
input <- read.csv("sample.csv", header = T, stringsAsFactors = F)
return(input)
}
###################################
# Create your other functions here.
###################################
#
convertXML <- function(result){
root <- xmlTree()
root$addTag("record",close = FALSE)
for (i in 1:nrow(result)) {
root$addTag("patient", close=FALSE)
for (j in names(result)) {
root$addTag(j, result[i, j])
}
root$closeTag()
}
root$closeTag()
return(cat(saveXML(root)))
}
main <- function(){
path <- getwd()
print(path)
#input <- parse_csv(path)
# args <- commandArgs(trailingOnly = TRUE)
# args[1] <- toupper(args[1])
#
# if (isTRUE(args[1] == "XML") ){
#     print(convertXML(input))
# }else if(isTRUE(args[1]) == "JSON"){
#     print("json")
# }else{
#     print("incorrect type of file")
# }
#
}
main()
